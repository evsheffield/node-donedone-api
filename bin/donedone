#!/usr/bin/env node

var program = require('commander')
  , donedone = require('../lib/donedone-api.js')
  , fs = require('fs')
  , chalk = require('chalk')
  , rd = chalk.red
  , yw = chalk.yellow
  , gn = chalk.green
  , gy = chalk.gray;

var defaults = {
  title: 'Release Build for ' + new Date().toDateString(),
  description: 'No description',
  emailBody: 'Dear [First Name] [Last Name],\n\n' +
    'There is a new release build for {{Project Name}}.\n\n' +
    'Go here to view the issues in this release build: [Link to Issues For Retest]'
};

// Read the .donedonerc file
var readDonedonerc = function() {
  if(fs.existsSync('.donedonerc')) {
    try {
      var donedonerc = JSON.parse(fs.readFileSync('.donedonerc', {encoding: 'utf8'}));
      Object.keys(donedonerc).forEach(function(key) {
        if(!program.hasOwnProperty(key) || program[key] === defaults[key]) {
          program[key] = donedonerc[key];
        }
      });
    } catch(err) {
      console.log(rd('.donedonerc file could not be parsed!'));
      console.log(rd(err.message));
    }
  }
};

program.version(require('../package.json').version)
  .usage('<action> [options]')
  .option('-s, --subdomain [string]', 'The DoneDone subdomain')
  .option('-u, --username [string]', 'The DoneDone username')
  .option('-p, --password [string]', 'The DoneDone password or API key')
  .option('-t, --title [string]', 'Title for the release build', defaults.title)
  .option('-d, --description [string]', 'Description for the release build', defaults.description)
  .option('-e, --emailBody [string]', 'Body of the email to send for the release build', defaults.emailBody);

program.command('release-build <projectId>')
  .description('Create a full release build')
  .action(function(projectId) {
    readDonedonerc();

    donedone.createFullReleaseBuild(program.subdomain, program.username, program.password, projectId, program.title, program.description, program.emailBody, function(err, data) {
      if(err) {
        console.log(rd('Error creating release build: ') + gy(err));
      }
      else {
        console.log(gn('Successfully created release build!'));
      }
    });
  });



program.command('issues-waiting')
  .description('Get a list of issues currently waiting on you')
  .action(function() {
    readDonedonerc();

    donedone.getIssuesWaitingOnYou(program.subdomain, program.username, program.password, function(err, data) {
      if(err) {
        console.log(rd('Error retrieving your issue list: ') + gy(err));
      }
      else {
        for (var i = 0; i < data.issues.length; i++) {
          console.log("\n");
          if (data.issues[i].priority.id === 1) {
            console.log(gn.bold(data.issues[i].title));
          }
          else if (data.issues[i].priority.id === 2) {
            console.log(yw.bold(data.issues[i].title));
          }
          else if (data.issues[i].priority.id === 3) {
            console.log(rd.bold(data.issues[i].title));
          }

          console.log("\t Issue Number: " + data.issues[i].order_number);
          console.log("\t Project: " + data.issues[i].project.name + "(" + data.issues[i].project.id + ")");
          console.log("\t Status: " + data.issues[i].status.name);
          console.log("\t Priority: " + data.issues[i].priority.name);
          console.log("\t Fixer: " + data.issues[i].fixer.name);
        }
      }
    });
  });




program.command('get-issue <projectId> <issueId>')
  .description('Get details on a specific issue')
  .action(function(projectId, issueId) {
    readDonedonerc();

    donedone.getIssue(program.subdomain, program.username, program.password, projectId, issueId, function(err, data) {
      if(err) {
        console.log(rd('Error retrieving issue details: ') + gy(err));
      }
      else {
        if (data.priority.id === 1) {
          console.log(gn.bold(data.title));
        }
        else if (data.priority.id === 2) {
          console.log(yw.bold(data.title));
        }
        else if (data.priority.id === 3) {
          console.log(rd.bold(data.title));
        }

        console.log("\n");
        console.log("Issue Number: " + data.order_number);
        console.log("Project: " + data.project.name + "(" + data.project.id + ")");
        console.log("Status: " + data.status.name);
        console.log("Priority: " + data.priority.name);
        console.log("Fixer: " + data.fixer.name);
        console.log("\n");
        console.log(chalk.bold("Description\n"));
        console.log(data.description.replace(/<.*?>/g,""));

        for (var i = 0; i < data.histories.length; i++) {
          console.log(chalk.bold(data.histories[i].action));
          console.log(data.histories[i].description.replace(/<.*?>/g,""));
        }

      }
    });
  });


program.parse(process.argv);
